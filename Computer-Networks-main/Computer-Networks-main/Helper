int usfdMaker(char* socketPath){
    int usfd = socket(AF_UNIX,SOCK_STREAM,0);

    struct sockaddr_un addr;
    addr.sun_family = AF_UNIX;
    strcpy(addr.sun_path,socketPath);

    unlink(socketPath);
    if(bind(usfd,(sockaddr*)&addr,sizeof(addr)) < 0){
        perror("bind fail ");
        exit(0);
    }
    if(listen(usfd,5) < 0){
        perror("listen fail ");
        exit(0);
    }
    return usfd;
}
-----------------------------------------------------------------------------------------------


int sfdMaker(int port){
    struct sockaddr_in AT;
    int sfd;
	if((sfd = socket(AF_INET, SOCK_STREAM, 0)) < 0){
		perror("sfd fail");
		return 0;
	}
	int opt = 1;
	if (setsockopt(sfd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {
        	perror("setsockopt");
        	return 0;
    }
	AT.sin_family = AF_INET;
	AT.sin_addr.s_addr = INADDR_ANY;
	AT.sin_port = htons(port);
	if(bind(sfd,(struct sockaddr*) &AT, sizeof(AT)) < 0){
		perror("bind failed");
		return 0;
	}
	if(listen(sfd,3) < 0){
		perror("listen failed");
		return 0;
	}
    return sfd;
}
-----------------------------------------------------------------------------------------------


int usfd = socket(AF_UNIX,SOCK_STREAM,0);
    struct sockaddr_un addr;
    addr.sun_family = AF_UNIX;
    char sp[100];
    sprintf(sp,"%d",randInt);
    strcpy(addr.sun_path,sp);
    if(connect(usfd,(struct sockaddr *)&addr,sizeof(addr))==-1)perror("\n connect ");


-----------------------------------------------------------------------------------------------

if((sfd = socket(AF_INET, SOCK_STREAM, 0)) < 0){
		perror("sfd fail");
		exit(0);
	}



	address.sin_family = AF_INET;
	address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(8000);
	
	if(connect(sfd,(struct sockaddr*)&address,sizeof(address)) < 0){
		perror("connect failed");
		exit(0);
	}

-----------------------------------------------------------------------------------------------


int nusfd;
        sockaddr_un clien;
        socklen_t cliensize = sizeof(clien);
        nusfd = accept(usfd,(sockaddr*)&clien,&cliensize);

-----------------------------------------------------------------------------------------------

int nsfd;
        sockaddr_in clien;
        socklen_t cliensize = sizeof(clien);
        nsfd = accept(sfd,(sockaddr*)&clien,&cliensize);
